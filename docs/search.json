[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ENTJames",
    "section": "",
    "text": "제조업 분야 데이터 분석가를 희망합니다."
  },
  {
    "objectID": "index.html#홈페이지-첫-화면-입니다.",
    "href": "index.html#홈페이지-첫-화면-입니다.",
    "title": "포트폴리오 웹사이트",
    "section": "홈페이지 첫 화면 입니다.",
    "text": "홈페이지 첫 화면 입니다.\n\n1 + 1\n\n2\n\n\n동해물과 백두산이 마르고 닳도록~~"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Me\n\n# 부산광역시 금정구 구서동 거주"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "2024-07-15(월) homework1\n\np.84 혼자서 해보기\n\nQ1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf_fruit = pd.DataFrame({'제품'   : ['사과', '딸기', '수박'],\n                         '가격'   : [1800, 1500, 3000],\n                         '판매량' : [24, 38, 13]\n                        })\ndf_fruit\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nprice_mean = sum(df_fruit['가격']) / 3\nprice_mean\n\n2100.0\n\n\n\nsell_mean = sum(df_fruit['판매량']) / 3\nsell_mean\n\n25.0\n\n\n\n\n\np.115 혼자서 해보기\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('mpg.csv')\nmpg_new = mpg.copy()\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg_new = mpg_new.rename(columns = {'cty' :'city','hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.130 분석 도전\n\n문제1. midwest.csv를 불러와 데이터 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('midwest.csv')\nmidwest.info()\n# midwest.shape\n# midwest.describe()\n# midwest.head()\n# midwest.tail()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n문제2. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\n\n\n\n문제3. total,asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['ratio'] = midwest['asian'] / midwest['total'] * 100\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n7.667090\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n3.138596\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n2.620907\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n5.659847\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n4.583725\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n\n\n\n\n437 rows × 29 columns\n\n\n\n\nmidwest['ratio'].plot.hist()\n\n\n\n\n\n\n\n\n\n\n문제4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 large, 그 외에는 small을 부여한 파생변수를 만들어 보세요.\n\nratio_mean = midwest['ratio'].mean()\nratio_mean\n\n0.4872461834357345\n\n\n\nimport numpy as np\nmidwest['size'] = np.where(midwest['ratio'] &gt; ratio_mean, 'large', 'small')\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\n문제5. large와 small에 해당하는 지역이 얼마나 많은지 반도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\ncount = midwest['size'].value_counts()\ncount\n\nsize\nsmall    318\nlarge    119\nName: count, dtype: int64\n\n\n\ncount.plot.bar(rot=0)"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을",
    "href": "hw1.html#다음-표의-내용을",
    "title": "hw1",
    "section": "다음 표의 내용을",
    "text": "다음 표의 내용을\n\nimport pandas as pd"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과','딸기','수박'],\n                   '가격' : [1800,1500,3000],\n                   '판매량' : [24,38,13]\n                   })\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "index.html#ls빅데이터-스쿨-3기-수료예정생",
    "href": "index.html#ls빅데이터-스쿨-3기-수료예정생",
    "title": "ENTJames",
    "section": "LS빅데이터 스쿨 3기 수료(예정)생",
    "text": "LS빅데이터 스쿨 3기 수료(예정)생\n\n1 + 2 + 3\n\n6\n\n\n동해물과 백두산이 마르고 닳도록~~"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "2024-07-16(화) homework2\n\np.144 혼자서 해보기\n\nimport pandas as pd\nmpg = pd.read_csv('mpg.csv')\n\n\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\ndispl_4 = mpg.query('displ &lt;= 4')\ndispl_5 = mpg.query('displ &gt;= 5')\n\n\ndispl_4['hwy'].mean()\n\n25.96319018404908\n\n\n\ndispl_5['hwy'].mean()\n\n18.07894736842105\n\n\n\n# displ이 4 이하인 자동차 평균이 더 높다.\n\n\n\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota' 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\n\naudi['cty'].mean()\n\n17.61111111111111\n\n\n\ntoyota['cty'].mean()\n\n18.529411764705884\n\n\n\n# toyota의 도시연비가 더 높다.\n\n\n\nQ3. 'chvrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nnew_mpg = mpg.query('manufacturer in [\"chvrolet\", \"ford\", \"honda\"]')\nnew_mpg['hwy'].mean()\n\n22.852941176470587\n\n\n\n\n\np.153 혼자서 해보기\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 'hwy' (고속도로 연비)가 높은지 알아보려고 합니다. 'audi'에서 생산한 자동차 중 'hwy'가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi = mpg.query('manufacturer == \"audi\"') \\\n          .sort_values('hwy',ascending = False) \\\n          .head(5)\naudi\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.158 혼자서 해보기\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg2 = mpg.copy()\n\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg2.sort_values('mean',ascending = False) \\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg.assign(total = mpg['cty'] + mpg['hwy'],\n           mean = lambda x: x['total'] / 2) \\\n   .sort_values('mean',ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "presentation1 _traditional.html",
    "href": "presentation1 _traditional.html",
    "title": "presentation1_traditional",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from current font."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "전통시장 점포 규모와 인구비율에 관한 분석\n\n\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 2\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 1\n\n\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\n이태현\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "",
    "text": "2024-07-16(화) homework2\n\np.144 혼자서 해보기\n\nimport pandas as pd\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/mpg.csv')\n\n\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\ndispl_4 = mpg.query('displ &lt;= 4')\ndispl_5 = mpg.query('displ &gt;= 5')\n\n\ndispl_4['hwy'].mean()\n\n25.96319018404908\n\n\n\ndispl_5['hwy'].mean()\n\n18.07894736842105\n\n\n\n# displ이 4 이하인 자동차 평균이 더 높다.\n\n\n\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota' 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\n\naudi['cty'].mean()\n\n17.61111111111111\n\n\n\ntoyota['cty'].mean()\n\n18.529411764705884\n\n\n\n# toyota의 도시연비가 더 높다.\n\n\n\nQ3. 'chvrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nnew_mpg = mpg.query('manufacturer in [\"chvrolet\", \"ford\", \"honda\"]')\nnew_mpg['hwy'].mean()\n\n22.852941176470587\n\n\n\n\n\np.153 혼자서 해보기\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 'hwy' (고속도로 연비)가 높은지 알아보려고 합니다. 'audi'에서 생산한 자동차 중 'hwy'가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi = mpg.query('manufacturer == \"audi\"') \\\n          .sort_values('hwy',ascending = False) \\\n          .head(5)\naudi\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.158 혼자서 해보기\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg2 = mpg.copy()\n\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg2.sort_values('mean',ascending = False) \\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg.assign(total = mpg['cty'] + mpg['hwy'],\n           mean = lambda x: x['total'] / 2) \\\n   .sort_values('mean',ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS 빅데이터 스쿨 Homework 1",
    "section": "",
    "text": "2024-07-15(월) homework1\n\np.84 혼자서 해보기\n\nQ1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf_fruit = pd.DataFrame({'제품'   : ['사과', '딸기', '수박'],\n                         '가격'   : [1800, 1500, 3000],\n                         '판매량' : [24, 38, 13]\n                        })\ndf_fruit\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nprice_mean = sum(df_fruit['가격']) / 3\nprice_mean\n\n2100.0\n\n\n\nsell_mean = sum(df_fruit['판매량']) / 3\nsell_mean\n\n25.0\n\n\n\n\n\np.115 혼자서 해보기\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/mpg.csv')\nmpg_new = mpg.copy()\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg_new = mpg_new.rename(columns = {'cty' :'city','hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.130 분석 도전\n\n문제1. midwest.csv를 불러와 데이터 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/midwest.csv')\nmidwest.info()\n# midwest.shape\n# midwest.describe()\n# midwest.head()\n# midwest.tail()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n문제2. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\n\n\n\n문제3. total,asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['ratio'] = midwest['asian'] / midwest['total'] * 100\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n7.667090\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n3.138596\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n2.620907\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n5.659847\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n4.583725\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n\n\n\n\n437 rows × 29 columns\n\n\n\n\nmidwest['ratio'].plot.hist()\n\n\n\n\n\n\n\n\n\n\n문제4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 large, 그 외에는 small을 부여한 파생변수를 만들어 보세요.\n\nratio_mean = midwest['ratio'].mean()\nratio_mean\n\n0.4872461834357345\n\n\n\nimport numpy as np\nmidwest['size'] = np.where(midwest['ratio'] &gt; ratio_mean, 'large', 'small')\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\n문제5. large와 small에 해당하는 지역이 얼마나 많은지 반도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\ncount = midwest['size'].value_counts()\ncount\n\nsize\nsmall    318\nlarge    119\nName: count, dtype: int64\n\n\n\ncount.plot.bar(rot=0)"
  },
  {
    "objectID": "posts/project/index.html",
    "href": "posts/project/index.html",
    "title": "전통시장 점포 규모와 인구비율에 관한 분석",
    "section": "",
    "text": "점포수 크기에 따른 연령층 확인하기\n\n0~19세 = 유소년\n\n\n20~59세 = 성인\n\n\n60~100세 이상 = 노인\n\nimport pandas as pd\nimport numpy as np\n\n\n\n2015년 12월 기준 인구조사 파일 불러오기\n\npop = pd.read_excel('data/pop_2015.xlsx')\n\n\n\n원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)\n\nsubset = pop.iloc[1:18,1:14]\nfor col in subset.columns:\n    subset[col] = subset[col].str.replace(',', '').astype(int)\nsubset\n\n\n\n\n\n\n\n\n총 인구수\n연령구간인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n1\n10022181\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n\n\n2\n3513777\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n\n\n3\n2487829\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n\n\n4\n2925815\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n\n\n5\n1472199\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n\n\n6\n1518775\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n\n\n7\n1173534\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n\n\n8\n210884\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n\n\n9\n12522606\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n\n\n10\n1549507\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n\n\n11\n1583952\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n\n\n12\n2077649\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n\n\n13\n1869711\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n\n\n14\n1908996\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n\n\n15\n2702826\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n\n\n16\n3364702\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n\n\n17\n624395\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213\n\n\n\n\n\n\n\n\npop.iloc[1:18,1:14] = subset\npop = pop.iloc[0:18,0:14]\npop\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n연령구간인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n0\n전국\n51,529,338\n51,529,338\n4,601,688\n5,717,089\n6,699,048\n7,670,966\n8,858,993\n8,324,791\n5,073,279\n3,176,437\n1,225,210\n165,628\n16,209\n\n\n1\n서울특별시\n10022181\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n\n\n2\n부산광역시\n3513777\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n\n\n3\n대구광역시\n2487829\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n\n\n4\n인천광역시\n2925815\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n\n\n5\n광주광역시\n1472199\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n\n\n6\n대전광역시\n1518775\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n\n\n7\n울산광역시\n1173534\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n\n\n8\n세종특별자치시\n210884\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n\n\n9\n경기도\n12522606\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n\n\n10\n강원도\n1549507\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n\n\n11\n충청북도\n1583952\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n\n\n12\n충청남도\n2077649\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n\n\n13\n전라북도\n1869711\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n\n\n14\n전라남도\n1908996\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n\n\n15\n경상북도\n2702826\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n\n\n16\n경상남도\n3364702\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n\n\n17\n제주특별자치도\n624395\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213\n\n\n\n\n\n\n\n\n\n각 지역마다 연령층 비율 계산하기\n\npop_서울 = pop['총 인구수'][1]\npop_부산 = pop['총 인구수'][2]\npop_대구 = pop['총 인구수'][3]\npop_인천 = pop['총 인구수'][4]\npop_광주 = pop['총 인구수'][5]\npop_대전 = pop['총 인구수'][6]\npop_울산 = pop['총 인구수'][7]\npop_세종 = pop['총 인구수'][8]\npop_경기 = pop['총 인구수'][9]\npop_강원 = pop['총 인구수'][10]\npop_충북 = pop['총 인구수'][11]\npop_충남 = pop['총 인구수'][12]\npop_전북 = pop['총 인구수'][13]\npop_전남 = pop['총 인구수'][14]\npop_경북 = pop['총 인구수'][15]\npop_경남 = pop['총 인구수'][16]\npop_제주 = pop['총 인구수'][17]\n\n서울_유소년_비율 = (pop.iloc[1,3:5].sum()) / pop_서울* 100\n부산_유소년_비율 = (pop.iloc[2,3:5].sum()) / pop_부산* 100\n대구_유소년_비율 = (pop.iloc[3,3:5].sum()) / pop_대구* 100\n인천_유소년_비율 = (pop.iloc[4,3:5].sum()) / pop_인천* 100\n광주_유소년_비율 = (pop.iloc[5,3:5].sum()) / pop_광주* 100\n대전_유소년_비율 = (pop.iloc[6,3:5].sum()) / pop_대전* 100\n울산_유소년_비율 = (pop.iloc[7,3:5].sum()) / pop_울산* 100\n세종_유소년_비율 = (pop.iloc[8,3:5].sum()) / pop_세종* 100\n경기_유소년_비율 = (pop.iloc[9,3:5].sum()) / pop_경기* 100\n강원_유소년_비율 = (pop.iloc[10,3:5].sum()) / pop_강원* 100\n충북_유소년_비율 = (pop.iloc[11,3:5].sum()) / pop_충북* 100\n충남_유소년_비율 = (pop.iloc[12,3:5].sum()) / pop_충남* 100\n전북_유소년_비율 = (pop.iloc[13,3:5].sum()) / pop_전북* 100\n전남_유소년_비율 = (pop.iloc[14,3:5].sum()) / pop_전남* 100\n경북_유소년_비율 = (pop.iloc[15,3:5].sum()) / pop_경북* 100\n경남_유소년_비율 = (pop.iloc[16,3:5].sum()) / pop_경남* 100\n제주_유소년_비율 = (pop.iloc[17,3:5].sum()) / pop_제주* 100\n\n\n서울_성인_비율 = (pop.iloc[1,5:9].sum()) / pop_서울 * 100\n부산_성인_비율 = (pop.iloc[2,5:9].sum()) / pop_부산* 100\n대구_성인_비율 = (pop.iloc[3,5:9].sum()) / pop_대구* 100\n인천_성인_비율 = (pop.iloc[4,5:9].sum()) / pop_인천* 100\n광주_성인_비율 = (pop.iloc[5,5:9].sum()) / pop_광주* 100\n대전_성인_비율 = (pop.iloc[6,5:9].sum()) / pop_대전* 100\n울산_성인_비율 = (pop.iloc[7,5:9].sum()) / pop_울산* 100\n세종_성인_비율 = (pop.iloc[8,5:9].sum()) / pop_세종* 100\n경기_성인_비율 = (pop.iloc[9,5:9].sum()) / pop_경기* 100\n강원_성인_비율 = (pop.iloc[10,5:9].sum()) / pop_강원* 100\n충북_성인_비율 = (pop.iloc[11,5:9].sum()) / pop_충북* 100\n충남_성인_비율 = (pop.iloc[12,5:9].sum()) / pop_충남* 100\n전북_성인_비율 = (pop.iloc[13,5:9].sum()) / pop_전북* 100\n전남_성인_비율 = (pop.iloc[14,5:9].sum()) / pop_전남* 100\n경북_성인_비율 = (pop.iloc[15,5:9].sum()) / pop_경북* 100\n경남_성인_비율 = (pop.iloc[16,5:9].sum()) / pop_경남* 100\n제주_성인_비율 = (pop.iloc[17,5:9].sum()) / pop_제주* 100\n\n\n서울_노인_비율 = (pop.iloc[1,9:14].sum()) / pop_서울 * 100\n부산_노인_비율 = (pop.iloc[2,9:14].sum()) / pop_부산* 100\n대구_노인_비율 = (pop.iloc[3,9:14].sum()) / pop_대구* 100\n인천_노인_비율 = (pop.iloc[4,9:14].sum()) / pop_인천* 100\n광주_노인_비율 = (pop.iloc[5,9:14].sum()) / pop_광주* 100\n대전_노인_비율 = (pop.iloc[6,9:14].sum()) / pop_대전* 100\n울산_노인_비율 = (pop.iloc[7,9:14].sum()) / pop_울산* 100\n세종_노인_비율 = (pop.iloc[8,9:14].sum()) / pop_세종* 100\n경기_노인_비율 = (pop.iloc[9,9:14].sum()) / pop_경기* 100\n강원_노인_비율 = (pop.iloc[10,9:14].sum()) / pop_강원* 100\n충북_노인_비율 = (pop.iloc[11,9:14].sum()) / pop_충북* 100\n충남_노인_비율 = (pop.iloc[12,9:14].sum()) / pop_충남* 100\n전북_노인_비율 = (pop.iloc[13,9:14].sum()) / pop_전북* 100\n전남_노인_비율 = (pop.iloc[14,9:14].sum()) / pop_전남* 100\n경북_노인_비율 = (pop.iloc[15,9:14].sum()) / pop_경북* 100\n경남_노인_비율 = (pop.iloc[16,9:14].sum()) / pop_경남* 100\n제주_노인_비율 = (pop.iloc[17,9:14].sum()) / pop_제주* 100\n\n\n\n인구 비율 DataFrame 만들기\n\npop_ratio = pd.DataFrame({\n  'seoul'      : [서울_유소년_비율, 서울_성인_비율, 서울_노인_비율],\n  'busan'      : [부산_유소년_비율, 부산_성인_비율, 부산_노인_비율],\n  'daegu'      : [대구_유소년_비율, 대구_성인_비율, 대구_노인_비율],\n  'incheon'    : [인천_유소년_비율, 인천_성인_비율, 인천_노인_비율],\n  'gwangju'    : [광주_유소년_비율, 광주_성인_비율, 광주_노인_비율],\n  'dajeon'     : [대전_유소년_비율, 대전_성인_비율, 대전_노인_비율],\n  'ulsan'      : [울산_유소년_비율, 울산_성인_비율, 울산_노인_비율],\n  'sejong'     : [세종_유소년_비율, 세종_성인_비율, 세종_노인_비율],\n  'gyeonggi'   : [경기_유소년_비율, 경기_성인_비율, 경기_노인_비율],\n  'gangwon'    : [강원_유소년_비율, 강원_성인_비율, 강원_노인_비율],\n  'chung_buk'  : [충북_유소년_비율, 충북_성인_비율, 충북_노인_비율],\n  'chung_nam'  : [충남_유소년_비율, 충남_성인_비율, 충남_노인_비율],\n  'jun_buk'    : [전북_유소년_비율, 전북_성인_비율, 전북_노인_비율],\n  'jun_nam'    : [전남_유소년_비율, 전남_성인_비율, 전남_노인_비율],\n  'gyeong_buk' : [경북_유소년_비율, 경북_성인_비율, 경북_노인_비율],\n  'gyeong_nam' : [경남_유소년_비율, 경남_성인_비율, 경남_노인_비율],\n  'jeju'       : [제주_유소년_비율, 제주_성인_비율, 제주_노인_비율]\n  })\n\npop_ratio.index = ['youth','adult','old']\n\npop_ratio\n\n\n\n\n\n\n\n\nseoul\nbusan\ndaegu\nincheon\ngwangju\ndajeon\nulsan\nsejong\ngyeonggi\ngangwon\nchung_buk\nchung_nam\njun_buk\njun_nam\ngyeong_buk\ngyeong_nam\njeju\n\n\n\n\nyouth\n17.651737\n17.437931\n20.005595\n20.380236\n23.142591\n21.728893\n21.831408\n25.238046\n21.808344\n18.996236\n20.325553\n20.525604\n20.197613\n19.282335\n18.525832\n20.868237\n22.501141\n\n\nadult\n63.912396\n60.857391\n61.407557\n63.853490\n60.802718\n62.230482\n64.150336\n59.895488\n62.918054\n57.711840\n59.036953\n57.425821\n55.962285\n54.060092\n57.134052\n59.572973\n58.640284\n\n\nold\n18.435867\n21.704678\n18.586848\n15.766274\n16.054691\n16.040625\n14.018256\n14.866467\n15.273602\n23.291924\n20.637494\n22.048575\n23.840101\n26.657573\n24.340117\n19.558790\n18.858575"
  }
]