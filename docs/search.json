[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ENTJames",
    "section": "",
    "text": "제조업 분야 데이터 분석가를 희망합니다."
  },
  {
    "objectID": "index.html#홈페이지-첫-화면-입니다.",
    "href": "index.html#홈페이지-첫-화면-입니다.",
    "title": "포트폴리오 웹사이트",
    "section": "홈페이지 첫 화면 입니다.",
    "text": "홈페이지 첫 화면 입니다.\n\n1 + 1\n\n2\n\n\n동해물과 백두산이 마르고 닳도록~~"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Me\n\n# 부산광역시 금정구 구서동 거주"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "2024-07-15(월) homework1\n\np.84 혼자서 해보기\n\nQ1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf_fruit = pd.DataFrame({'제품'   : ['사과', '딸기', '수박'],\n                         '가격'   : [1800, 1500, 3000],\n                         '판매량' : [24, 38, 13]\n                        })\ndf_fruit\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nprice_mean = sum(df_fruit['가격']) / 3\nprice_mean\n\n2100.0\n\n\n\nsell_mean = sum(df_fruit['판매량']) / 3\nsell_mean\n\n25.0\n\n\n\n\n\np.115 혼자서 해보기\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('mpg.csv')\nmpg_new = mpg.copy()\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg_new = mpg_new.rename(columns = {'cty' :'city','hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.130 분석 도전\n\n문제1. midwest.csv를 불러와 데이터 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('midwest.csv')\nmidwest.info()\n# midwest.shape\n# midwest.describe()\n# midwest.head()\n# midwest.tail()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n문제2. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\n\n\n\n문제3. total,asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['ratio'] = midwest['asian'] / midwest['total'] * 100\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n7.667090\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n3.138596\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n2.620907\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n5.659847\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n4.583725\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n\n\n\n\n437 rows × 29 columns\n\n\n\n\nmidwest['ratio'].plot.hist()\n\n\n\n\n\n\n\n\n\n\n문제4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 large, 그 외에는 small을 부여한 파생변수를 만들어 보세요.\n\nratio_mean = midwest['ratio'].mean()\nratio_mean\n\n0.4872461834357345\n\n\n\nimport numpy as np\nmidwest['size'] = np.where(midwest['ratio'] &gt; ratio_mean, 'large', 'small')\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\n문제5. large와 small에 해당하는 지역이 얼마나 많은지 반도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\ncount = midwest['size'].value_counts()\ncount\n\nsize\nsmall    318\nlarge    119\nName: count, dtype: int64\n\n\n\ncount.plot.bar(rot=0)"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을",
    "href": "hw1.html#다음-표의-내용을",
    "title": "hw1",
    "section": "다음 표의 내용을",
    "text": "다음 표의 내용을\n\nimport pandas as pd"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과','딸기','수박'],\n                   '가격' : [1800,1500,3000],\n                   '판매량' : [24,38,13]\n                   })\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "index.html#ls빅데이터-스쿨-3기-수료예정생",
    "href": "index.html#ls빅데이터-스쿨-3기-수료예정생",
    "title": "ENTJames",
    "section": "LS빅데이터 스쿨 3기 수료(예정)생",
    "text": "LS빅데이터 스쿨 3기 수료(예정)생\n\n1 + 2 + 3\n\n6\n\n\n동해물과 백두산이 마르고 닳도록~~"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "2024-07-16(화) homework2\n\np.144 혼자서 해보기\n\nimport pandas as pd\nmpg = pd.read_csv('mpg.csv')\n\n\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\ndispl_4 = mpg.query('displ &lt;= 4')\ndispl_5 = mpg.query('displ &gt;= 5')\n\n\ndispl_4['hwy'].mean()\n\n25.96319018404908\n\n\n\ndispl_5['hwy'].mean()\n\n18.07894736842105\n\n\n\n# displ이 4 이하인 자동차 평균이 더 높다.\n\n\n\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota' 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\n\naudi['cty'].mean()\n\n17.61111111111111\n\n\n\ntoyota['cty'].mean()\n\n18.529411764705884\n\n\n\n# toyota의 도시연비가 더 높다.\n\n\n\nQ3. 'chvrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nnew_mpg = mpg.query('manufacturer in [\"chvrolet\", \"ford\", \"honda\"]')\nnew_mpg['hwy'].mean()\n\n22.852941176470587\n\n\n\n\n\np.153 혼자서 해보기\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 'hwy' (고속도로 연비)가 높은지 알아보려고 합니다. 'audi'에서 생산한 자동차 중 'hwy'가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi = mpg.query('manufacturer == \"audi\"') \\\n          .sort_values('hwy',ascending = False) \\\n          .head(5)\naudi\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.158 혼자서 해보기\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg2 = mpg.copy()\n\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg2.sort_values('mean',ascending = False) \\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg.assign(total = mpg['cty'] + mpg['hwy'],\n           mean = lambda x: x['total'] / 2) \\\n   .sort_values('mean',ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "presentation1 _traditional.html",
    "href": "presentation1 _traditional.html",
    "title": "presentation1_traditional",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from current font."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "LS 빅데이터 스쿨 Homework 6\n\n\n\n\n\n\n\n\n\n\n\nAug 5, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 5\n\n\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 4\n\n\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 3\n\n\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\n교재 복습\n\n\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\n전통시장 점포 규모와 인구비율에 관한 분석\n\n\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 2\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\n이태현\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 1\n\n\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\n이태현\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "",
    "text": "2024-07-16(화) homework2\n\np.144 혼자서 해보기\n\nimport pandas as pd\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/mpg.csv')\n\n\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\ndispl_4 = mpg.query('displ &lt;= 4')\ndispl_5 = mpg.query('displ &gt;= 5')\n\n\ndispl_4['hwy'].mean()\n\n25.96319018404908\n\n\n\ndispl_5['hwy'].mean()\n\n18.07894736842105\n\n\n\n# displ이 4 이하인 자동차 평균이 더 높다.\n\n\n\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota' 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\n\naudi['cty'].mean()\n\n17.61111111111111\n\n\n\ntoyota['cty'].mean()\n\n18.529411764705884\n\n\n\n# toyota의 도시연비가 더 높다.\n\n\n\nQ3. 'chvrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nnew_mpg = mpg.query('manufacturer in [\"chvrolet\", \"ford\", \"honda\"]')\nnew_mpg['hwy'].mean()\n\n22.852941176470587\n\n\n\n\n\np.153 혼자서 해보기\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 'hwy' (고속도로 연비)가 높은지 알아보려고 합니다. 'audi'에서 생산한 자동차 중 'hwy'가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi = mpg.query('manufacturer == \"audi\"') \\\n          .sort_values('hwy',ascending = False) \\\n          .head(5)\naudi\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.158 혼자서 해보기\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg2 = mpg.copy()\n\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg2.sort_values('mean',ascending = False) \\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg.assign(total = mpg['cty'] + mpg['hwy'],\n           mean = lambda x: x['total'] / 2) \\\n   .sort_values('mean',ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS 빅데이터 스쿨 Homework 1",
    "section": "",
    "text": "2024-07-15(월) homework1\n\np.84 혼자서 해보기\n\nQ1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf_fruit = pd.DataFrame({'제품'   : ['사과', '딸기', '수박'],\n                         '가격'   : [1800, 1500, 3000],\n                         '판매량' : [24, 38, 13]\n                        })\ndf_fruit\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nprice_mean = sum(df_fruit['가격']) / 3\nprice_mean\n\n2100.0\n\n\n\nsell_mean = sum(df_fruit['판매량']) / 3\nsell_mean\n\n25.0\n\n\n\n\n\np.115 혼자서 해보기\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/mpg.csv')\nmpg_new = mpg.copy()\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg_new = mpg_new.rename(columns = {'cty' :'city','hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n\np.130 분석 도전\n\n문제1. midwest.csv를 불러와 데이터 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/midwest.csv')\nmidwest.info()\n# midwest.shape\n# midwest.describe()\n# midwest.head()\n# midwest.tail()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n문제2. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\n\n\n\n문제3. total,asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['ratio'] = midwest['asian'] / midwest['total'] * 100\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n7.667090\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n3.138596\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n2.620907\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n5.659847\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n4.583725\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n\n\n\n\n437 rows × 29 columns\n\n\n\n\nmidwest['ratio'].plot.hist()\n\n\n\n\n\n\n\n\n\n\n문제4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 large, 그 외에는 small을 부여한 파생변수를 만들어 보세요.\n\nratio_mean = midwest['ratio'].mean()\nratio_mean\n\n0.4872461834357345\n\n\n\nimport numpy as np\nmidwest['size'] = np.where(midwest['ratio'] &gt; ratio_mean, 'large', 'small')\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\n문제5. large와 small에 해당하는 지역이 얼마나 많은지 반도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\ncount = midwest['size'].value_counts()\ncount\n\nsize\nsmall    318\nlarge    119\nName: count, dtype: int64\n\n\n\ncount.plot.bar(rot=0)"
  },
  {
    "objectID": "posts/project/index.html",
    "href": "posts/project/index.html",
    "title": "전통시장 점포 규모와 인구비율에 관한 분석",
    "section": "",
    "text": "분석 목적\n전통시장 홍보 목적 가설 : 만약 인구가 많아도 점포수가 적으면 홍보 필요성이 생긴다. 여행 루트에 전통시장을 추가?\n2024년에 보도된 세계타임즈에서 KB국민카드의 전통시장 카드 소비 데이터 분석을 볼 수 있습니다. 전통시장의 연령별 매출 비중에서 40%는 60대 이상에서 발생되었습니다. 50대 26%, 40대 17%, 30대 10%, 20대 7%로 연령대가 높을수록 매출 비중이 높게 나타났습니다.\n시장은 인구가 많은 곳에 분포되어 있는데, 전통시장 또한 단순히 인구가 많은 곳이 점포수가 많은지? 주 고객층인 60대 이상이 많은 지역에 점포수가 많은지? 알고 싶었다.\n2015년 기준으로 60대 이상 비율이 높은 행정구역에 점포수가 많이 분포되어 있는지 분석하기. 이를 바탕으로 60대 비율이 적고, 인구가 많은 수도권, 광역시에 점포수가 많은지? 60대 이상 비율이 높고, 인구가 적은 구역에 점포수가 많은지 비교하기.\n\n나이 나누기\n0~19세 = age_under_20\n20~59세 = age_2050\n60~100세 이상 = age_over_60\n한국은 공공기관 및 일부 기업이 60세로 정년으로 두고 있기 때문에 위와 같이 노년의 기준을 60세 이상으로 정했습니다. 미국과 유럽은 60~65세 사이를 정년으로 두고 있습니다. 그리고\n\n\n\n점포수 크기에 따른 연령층 확인하기\n\nimport pandas as pd\nimport numpy as np\n\n\n2015년 12월 기준 인구조사 파일 불러오기\n\npop = pd.read_excel('data/pop_2015.xlsx')\n\n\n\n원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)\n\nsubset = pop.iloc[1:18,1:14]\nfor col in subset.columns:\n    subset[col] = subset[col].str.replace(',', '').astype(int)\nsubset\n\n\n\n\n\n\n\n\n총 인구수\n연령구간인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n1\n10022181\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n\n\n2\n3513777\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n\n\n3\n2487829\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n\n\n4\n2925815\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n\n\n5\n1472199\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n\n\n6\n1518775\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n\n\n7\n1173534\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n\n\n8\n210884\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n\n\n9\n12522606\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n\n\n10\n1549507\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n\n\n11\n1583952\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n\n\n12\n2077649\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n\n\n13\n1869711\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n\n\n14\n1908996\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n\n\n15\n2702826\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n\n\n16\n3364702\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n\n\n17\n624395\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213\n\n\n\n\n\n\n\n\npop.iloc[1:18,1:14] = subset\npop = pop.iloc[0:18,0:14]\npop\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n연령구간인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n0\n전국\n51,529,338\n51,529,338\n4,601,688\n5,717,089\n6,699,048\n7,670,966\n8,858,993\n8,324,791\n5,073,279\n3,176,437\n1,225,210\n165,628\n16,209\n\n\n1\n서울특별시\n10022181\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n\n\n2\n부산광역시\n3513777\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n\n\n3\n대구광역시\n2487829\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n\n\n4\n인천광역시\n2925815\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n\n\n5\n광주광역시\n1472199\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n\n\n6\n대전광역시\n1518775\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n\n\n7\n울산광역시\n1173534\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n\n\n8\n세종특별자치시\n210884\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n\n\n9\n경기도\n12522606\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n\n\n10\n강원도\n1549507\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n\n\n11\n충청북도\n1583952\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n\n\n12\n충청남도\n2077649\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n\n\n13\n전라북도\n1869711\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n\n\n14\n전라남도\n1908996\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n\n\n15\n경상북도\n2702826\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n\n\n16\n경상남도\n3364702\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n\n\n17\n제주특별자치도\n624395\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213\n\n\n\n\n\n\n\n\n\n각 지역마다 연령층 비율 계산하기\n\npop_서울, pop_부산, pop_대구, pop_인천, pop_광주, pop_대전, pop_울산, pop_세종, \\\npop_경기, pop_강원, pop_충북, pop_충남, pop_전북, pop_전남, pop_경북, pop_경남, pop_제주 = [\n    pop['총 인구수'][i] for i in range(1, 18)]\n\n서울_유소년_비율 = (pop.iloc[1,3:5].sum()) / pop_서울* 100\n부산_유소년_비율 = (pop.iloc[2,3:5].sum()) / pop_부산* 100\n대구_유소년_비율 = (pop.iloc[3,3:5].sum()) / pop_대구* 100\n인천_유소년_비율 = (pop.iloc[4,3:5].sum()) / pop_인천* 100\n광주_유소년_비율 = (pop.iloc[5,3:5].sum()) / pop_광주* 100\n대전_유소년_비율 = (pop.iloc[6,3:5].sum()) / pop_대전* 100\n울산_유소년_비율 = (pop.iloc[7,3:5].sum()) / pop_울산* 100\n세종_유소년_비율 = (pop.iloc[8,3:5].sum()) / pop_세종* 100\n경기_유소년_비율 = (pop.iloc[9,3:5].sum()) / pop_경기* 100\n강원_유소년_비율 = (pop.iloc[10,3:5].sum()) / pop_강원* 100\n충북_유소년_비율 = (pop.iloc[11,3:5].sum()) / pop_충북* 100\n충남_유소년_비율 = (pop.iloc[12,3:5].sum()) / pop_충남* 100\n전북_유소년_비율 = (pop.iloc[13,3:5].sum()) / pop_전북* 100\n전남_유소년_비율 = (pop.iloc[14,3:5].sum()) / pop_전남* 100\n경북_유소년_비율 = (pop.iloc[15,3:5].sum()) / pop_경북* 100\n경남_유소년_비율 = (pop.iloc[16,3:5].sum()) / pop_경남* 100\n제주_유소년_비율 = (pop.iloc[17,3:5].sum()) / pop_제주* 100\n\n\n서울_성인_비율 = (pop.iloc[1,5:9].sum()) / pop_서울 * 100\n부산_성인_비율 = (pop.iloc[2,5:9].sum()) / pop_부산* 100\n대구_성인_비율 = (pop.iloc[3,5:9].sum()) / pop_대구* 100\n인천_성인_비율 = (pop.iloc[4,5:9].sum()) / pop_인천* 100\n광주_성인_비율 = (pop.iloc[5,5:9].sum()) / pop_광주* 100\n대전_성인_비율 = (pop.iloc[6,5:9].sum()) / pop_대전* 100\n울산_성인_비율 = (pop.iloc[7,5:9].sum()) / pop_울산* 100\n세종_성인_비율 = (pop.iloc[8,5:9].sum()) / pop_세종* 100\n경기_성인_비율 = (pop.iloc[9,5:9].sum()) / pop_경기* 100\n강원_성인_비율 = (pop.iloc[10,5:9].sum()) / pop_강원* 100\n충북_성인_비율 = (pop.iloc[11,5:9].sum()) / pop_충북* 100\n충남_성인_비율 = (pop.iloc[12,5:9].sum()) / pop_충남* 100\n전북_성인_비율 = (pop.iloc[13,5:9].sum()) / pop_전북* 100\n전남_성인_비율 = (pop.iloc[14,5:9].sum()) / pop_전남* 100\n경북_성인_비율 = (pop.iloc[15,5:9].sum()) / pop_경북* 100\n경남_성인_비율 = (pop.iloc[16,5:9].sum()) / pop_경남* 100\n제주_성인_비율 = (pop.iloc[17,5:9].sum()) / pop_제주* 100\n\n\n서울_노인_비율 = (pop.iloc[1,9:14].sum()) / pop_서울 * 100\n부산_노인_비율 = (pop.iloc[2,9:14].sum()) / pop_부산* 100\n대구_노인_비율 = (pop.iloc[3,9:14].sum()) / pop_대구* 100\n인천_노인_비율 = (pop.iloc[4,9:14].sum()) / pop_인천* 100\n광주_노인_비율 = (pop.iloc[5,9:14].sum()) / pop_광주* 100\n대전_노인_비율 = (pop.iloc[6,9:14].sum()) / pop_대전* 100\n울산_노인_비율 = (pop.iloc[7,9:14].sum()) / pop_울산* 100\n세종_노인_비율 = (pop.iloc[8,9:14].sum()) / pop_세종* 100\n경기_노인_비율 = (pop.iloc[9,9:14].sum()) / pop_경기* 100\n강원_노인_비율 = (pop.iloc[10,9:14].sum()) / pop_강원* 100\n충북_노인_비율 = (pop.iloc[11,9:14].sum()) / pop_충북* 100\n충남_노인_비율 = (pop.iloc[12,9:14].sum()) / pop_충남* 100\n전북_노인_비율 = (pop.iloc[13,9:14].sum()) / pop_전북* 100\n전남_노인_비율 = (pop.iloc[14,9:14].sum()) / pop_전남* 100\n경북_노인_비율 = (pop.iloc[15,9:14].sum()) / pop_경북* 100\n경남_노인_비율 = (pop.iloc[16,9:14].sum()) / pop_경남* 100\n제주_노인_비율 = (pop.iloc[17,9:14].sum()) / pop_제주* 100\n\n\n\n인구 비율 DataFrame 만들기\n\npop_ratio = pd.DataFrame({\n  '서울'      : [서울_유소년_비율, 서울_성인_비율, 서울_노인_비율],\n  '부산'      : [부산_유소년_비율, 부산_성인_비율, 부산_노인_비율],\n  '대구'      : [대구_유소년_비율, 대구_성인_비율, 대구_노인_비율],\n  '인천'    : [인천_유소년_비율, 인천_성인_비율, 인천_노인_비율],\n  '광주'    : [광주_유소년_비율, 광주_성인_비율, 광주_노인_비율],\n  '대전'     : [대전_유소년_비율, 대전_성인_비율, 대전_노인_비율],\n  '울산'      : [울산_유소년_비율, 울산_성인_비율, 울산_노인_비율],\n  '세종'     : [세종_유소년_비율, 세종_성인_비율, 세종_노인_비율],\n  '경기도'   : [경기_유소년_비율, 경기_성인_비율, 경기_노인_비율],\n  '강원'    : [강원_유소년_비율, 강원_성인_비율, 강원_노인_비율],\n  '충청북도'  : [충북_유소년_비율, 충북_성인_비율, 충북_노인_비율],\n  '충청남도'  : [충남_유소년_비율, 충남_성인_비율, 충남_노인_비율],\n  '전라북도'    : [전북_유소년_비율, 전북_성인_비율, 전북_노인_비율],\n  '전라남도'    : [전남_유소년_비율, 전남_성인_비율, 전남_노인_비율],\n  '경상북도' : [경북_유소년_비율, 경북_성인_비율, 경북_노인_비율],\n  '경상남도' : [경남_유소년_비율, 경남_성인_비율, 경남_노인_비율],\n  '제주도'       : [제주_유소년_비율, 제주_성인_비율, 제주_노인_비율]\n  })\n\npop_ratio.index = ['age_under_20','age_2050','age_over_60']\npop_ratio = pop_ratio.transpose()\npop_ratio\n\n\n\n\n\n\n\n\nage_under_20\nage_2050\nage_over_60\n\n\n\n\n서울\n17.651737\n63.912396\n18.435867\n\n\n부산\n17.437931\n60.857391\n21.704678\n\n\n대구\n20.005595\n61.407557\n18.586848\n\n\n인천\n20.380236\n63.853490\n15.766274\n\n\n광주\n23.142591\n60.802718\n16.054691\n\n\n대전\n21.728893\n62.230482\n16.040625\n\n\n울산\n21.831408\n64.150336\n14.018256\n\n\n세종\n25.238046\n59.895488\n14.866467\n\n\n경기도\n21.808344\n62.918054\n15.273602\n\n\n강원\n18.996236\n57.711840\n23.291924\n\n\n충청북도\n20.325553\n59.036953\n20.637494\n\n\n충청남도\n20.525604\n57.425821\n22.048575\n\n\n전라북도\n20.197613\n55.962285\n23.840101\n\n\n전라남도\n19.282335\n54.060092\n26.657573\n\n\n경상북도\n18.525832\n57.134052\n24.340117\n\n\n경상남도\n20.868237\n59.572973\n19.558790\n\n\n제주도\n22.501141\n58.640284\n18.858575\n\n\n\n\n\n\n\n\n# 지역 칼럼 추가하기\npop_ratio['region'] = ['서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시', '대전광역시', '울산광역시', '세종특별시', '경기도', '강원도', '충청북도', '충청남도', '전라북도', '전라남도', '경상북도', '경상남도', '제주도']\n\npop_ratio\n\n\n\n\n\n\n\n\nage_under_20\nage_2050\nage_over_60\nregion\n\n\n\n\n서울\n17.651737\n63.912396\n18.435867\n서울특별시\n\n\n부산\n17.437931\n60.857391\n21.704678\n부산광역시\n\n\n대구\n20.005595\n61.407557\n18.586848\n대구광역시\n\n\n인천\n20.380236\n63.853490\n15.766274\n인천광역시\n\n\n광주\n23.142591\n60.802718\n16.054691\n광주광역시\n\n\n대전\n21.728893\n62.230482\n16.040625\n대전광역시\n\n\n울산\n21.831408\n64.150336\n14.018256\n울산광역시\n\n\n세종\n25.238046\n59.895488\n14.866467\n세종특별시\n\n\n경기도\n21.808344\n62.918054\n15.273602\n경기도\n\n\n강원\n18.996236\n57.711840\n23.291924\n강원도\n\n\n충청북도\n20.325553\n59.036953\n20.637494\n충청북도\n\n\n충청남도\n20.525604\n57.425821\n22.048575\n충청남도\n\n\n전라북도\n20.197613\n55.962285\n23.840101\n전라북도\n\n\n전라남도\n19.282335\n54.060092\n26.657573\n전라남도\n\n\n경상북도\n18.525832\n57.134052\n24.340117\n경상북도\n\n\n경상남도\n20.868237\n59.572973\n19.558790\n경상남도\n\n\n제주도\n22.501141\n58.640284\n18.858575\n제주도\n\n\n\n\n\n\n\n\n\n\n이전 데이터 불러오기\n\n# 데이터 불러오기\nmarket = pd.read_excel(\"data/traditionalmarket.xlsx\")\n\n# 분석을 위한 복사본 만들기\nmarket2 = market.copy()\n\n\n# 엑셀의 변수 한글을 영어로 rename\nmarket2 = market2.rename(columns = {\"시장명\"              : \"market_name\", \n                                    \"시장유형\"            : \"type\",\n                                    \"소재지도로명주소\"    : \"adress_road\",\n                                    \"시장개설주기\"        : \"open_period\",\n                                    \"소재지지번주소\"      : \"address_old\",\n                                    \"점포수\"              : \"market_count\",\n                                    \"사용가능상품권\"      : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\"     : \"parking_lot\",\n                                    \"개설년도\"            : \"year\",\n                                    \"데이터기준일자\"      : \"data_date\"})\n\n\n# 데이터의 정보 확인하기\nmarket2.describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\nmarket2['market_count'].describe()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\ncount    1439.000000\nmean      143.907575\nstd       298.989963\nmin         0.000000\n25%        50.000000\n50%        80.000000\n75%       134.000000\nmax      5852.000000\nName: market_count, dtype: float64\n\n\n\n# 점포수에 따른 규모 크기를 설명해주는 변수 만들기\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\n\n# 편의시설의 유무에 따른 레벨링 하기\nmarket2['level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\n\n\n# 확인 절차\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\nadress_road\nopen_period\naddress_old\nmarket_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n\n\n\n\n\n\n\n\n# 그래프 그리기\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# x축을 편의 시설 레벨\nsns.countplot(data = market2, x = 'level', hue = 'level')\nplt.show()\n\n# 그래프 그리기 위한 df 생성\n# 시장 유형와 규모 크기에 따른 그룹화 / 규모 크기 갯수 추가\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\n\n# 규모 크기에 따른 내림차순\ndf.sort_values('market_count', ascending = False)\n\n# 만든 df를 x축에 시장 유형, y축은 규모 크기에 따른 점포 갯수\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from current font.\n\nC:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning:\n\nGlyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from current font.\n\n\n\n\n\n\n\n\n\n\n\nplt.clf()\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nmarket2['region'] = market2['adress_road'].str.split().str[0]\nmarket2\n\n\n\n\n\n\n\n\nmarket_name\ntype\nadress_road\nopen_period\naddress_old\nmarket_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1434\n엄정내창시장\n상설+정기\n충청북도 충주시 엄정면 내창로 191-1\n5일\n충북 충주시 엄정면 미내리 159-15\n98\n온누리상품권\nN\nN\n2013.0\n2015-12-31\nmedium\nlow\n충청북도\n\n\n1435\n중앙공설시장\n상설\n충청북도 충주시 예성로 168\n상설\n충북 충주시 성서동 306\n65\n온누리상품권\nY\nY\n2005.0\n2015-12-31\nmedium\nhigh\n충청북도\n\n\n1436\n남부시장\n상설\n충청북도 충주시 지곡10길 38-1\n상설\n충북 충주시 지현동 1431\n61\n온누리상품권\nY\nY\n2005.0\n2015-12-31\nmedium\nhigh\n충청북도\n\n\n1437\n충주자유시장\n상설+정기\n충청북도 충주시 충인6길 16\n5일\n충북 충주시 충인동 325\n274\n온누리상품권\nY\nY\n2005.0\n2015-12-31\nlarge\nhigh\n충청북도\n\n\n1438\n목행시장\n상설+정기\n충청북도 충주시 행정9길 35\n5일\n충북 충주시 목행동 676-44\n92\n온누리상품권\nY\nY\n2013.0\n2015-12-31\nmedium\nhigh\n충청북도\n\n\n\n\n1439 rows × 14 columns\n\n\n\n\n\n인구 데이터와 시장 데이터 합치기\n\nmarket_pop = pd.merge(market2, pop_ratio, how = 'left', on = 'region')\nmarket_pop\n\n\n\n\n\n\n\n\nmarket_name\ntype\nadress_road\nopen_period\naddress_old\nmarket_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\nage_under_20\nage_2050\nage_over_60\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n18.996236\n57.711840\n23.291924\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n18.996236\n57.711840\n23.291924\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n18.996236\n57.711840\n23.291924\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n18.996236\n57.711840\n23.291924\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도\n18.996236\n57.711840\n23.291924\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1434\n엄정내창시장\n상설+정기\n충청북도 충주시 엄정면 내창로 191-1\n5일\n충북 충주시 엄정면 미내리 159-15\n98\n온누리상품권\nN\nN\n2013.0\n2015-12-31\nmedium\nlow\n충청북도\n20.325553\n59.036953\n20.637494\n\n\n1435\n중앙공설시장\n상설\n충청북도 충주시 예성로 168\n상설\n충북 충주시 성서동 306\n65\n온누리상품권\nY\nY\n2005.0\n2015-12-31\nmedium\nhigh\n충청북도\n20.325553\n59.036953\n20.637494\n\n\n1436\n남부시장\n상설\n충청북도 충주시 지곡10길 38-1\n상설\n충북 충주시 지현동 1431\n61\n온누리상품권\nY\nY\n2005.0\n2015-12-31\nmedium\nhigh\n충청북도\n20.325553\n59.036953\n20.637494\n\n\n1437\n충주자유시장\n상설+정기\n충청북도 충주시 충인6길 16\n5일\n충북 충주시 충인동 325\n274\n온누리상품권\nY\nY\n2005.0\n2015-12-31\nlarge\nhigh\n충청북도\n20.325553\n59.036953\n20.637494\n\n\n1438\n목행시장\n상설+정기\n충청북도 충주시 행정9길 35\n5일\n충북 충주시 목행동 676-44\n92\n온누리상품권\nY\nY\n2013.0\n2015-12-31\nmedium\nhigh\n충청북도\n20.325553\n59.036953\n20.637494\n\n\n\n\n1439 rows × 17 columns\n\n\n\n\n\n60대 이상 비율의 계급 나누기\n\nmarket_pop['age_over_60'].describe()\n\ncount    1439.000000\nmean       20.253145\nstd         3.405308\nmin        14.018256\n25%        18.435867\n50%        19.558790\n75%        23.291924\nmax        26.657573\nName: age_over_60, dtype: float64\n\n\n평균 20.25% 보다 높은 지역을 60대 이상 비율이 많다고 정의\n\n\n표 그리기\n\n# 평균 변수 지정\nmean_60 = market_pop['age_over_60'].mean()\n\n# 집단 나누기\nmarket_pop.groupby('market_scale') \\\n          .agg(mean = ('age_over_60','mean'))\n\n\n\n\n\n\n\n\nmean\n\n\nmarket_scale\n\n\n\n\n\nlarge\n19.663038\n\n\nmedium\n20.003572\n\n\nsmall\n21.366309"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "",
    "text": "2024-07-25(목)\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom\nfrom scipy.stats import norm\nimport math\nimport numpy as np\n\n\nQ.1 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그릴 것\nimport norm 사용 금지\n\ndef pdf(x, mu, sigma):\n    a = 1 / sigma*np.sqrt(2*math.pi)\n    b = (x - mu) / sigma\n    return a * np.exp(-0.5*b**2)\n\n\nz = np.linspace(-8,14,1000)\ny = pdf(z,3,2)\n\nplt.plot(z,y,color='black')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\nQ.2 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\nX ~ N(2,3^2)\n\n# 1번 P(X &lt; 3)\nnorm.cdf(3,2,3)\n\n0.6305586598182363\n\n\n\n# 2번 P(2 &lt; X &lt; 5)\nnorm.cdf(5,2,3) - norm.cdf(2,2,3)\n\n0.3413447460685429\n\n\n\n# 3번 P(X &lt; 3 or X &gt; 7)\nnorm.cdf(3,2,3) + (1 - (norm.cdf(7,2,3)))\n\n0.678349012091051\n\n\n\n\nQ.3 LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?\n\nnorm.ppf(0.95, 30, 2)\n\n33.28970725390295"
  },
  {
    "objectID": "posts/ch.8/index.html",
    "href": "posts/ch.8/index.html",
    "title": "text_book_ch8",
    "section": "",
    "text": "데이터 불러오기\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n\nmpg = pd.read_csv('../../data/mpg.csv')"
  },
  {
    "objectID": "posts/memo/index.html",
    "href": "posts/memo/index.html",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "",
    "text": "2024-07-22(월) textbook ch.8\n\n데이터 불러오기\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n\nmpg = pd.read_csv('../../data/mpg.csv')\n\n\nplt.clf()\nsns.scatterplot(data = mpg, x = 'displ', y = 'hwy', hue = 'drv') \\\n   .set(xlim = [3,6], ylim = [10,30])\nplt.show()\n\n\n\n\n\n\n\n\nplotly 사용하기\n\npx.scatter(data_frame = mpg, x = 'displ', y = 'hwy', color = 'drv')\n\n                                                \n\n\n\ndf_mpg = mpg.groupby('drv', as_index = False) \\\n            .agg(mean_hwy = ('hwy','mean'))\ndf_mpg = df_mpg.sort_values('mean_hwy',ascending = False)\ndf_mpg\n\n\n\n\n\n\n\n\ndrv\nmean_hwy\n\n\n\n\n1\nf\n28.160377\n\n\n2\nr\n21.000000\n\n\n0\n4\n19.174757\n\n\n\n\n\n\n\n\nplt.clf()\nsns.barplot(data = df_mpg, x = 'drv', y = 'mean_hwy', hue = 'drv')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2024-07-22(월) homework3\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/mpg.csv')\n\n\n\np.204 혼자서 해보기\n\nQ1. mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nplt.clf()\nsns.scatterplot(data = mpg, x = 'cty', y = 'hwy')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv('../../data/midwest.csv')\n\nplt.clf()\nsns.scatterplot(data = midwest, x = 'poptotal', y = 'popasian') \\\n   .set(xlim = [0,500000], ylim = [0,10000])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\np.211 혼자서 해보기\n\nQ1. 어떤 회사에서 생산한 'suv'차종의 도시 연비가 높ㅇㄴ지 알아보려고 합니다. 'suv'차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\ndf = mpg.query('category == \"suv\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(mean_cty = ('cty','mean')) \\\n   .sort_values('mean_cty', ascending = False) \\\n   .head()\ndf\n\n\n\n\n\n\n\n\nmanufacturer\nmean_cty\n\n\n\n\n8\nsubaru\n18.833333\n\n\n9\ntoyota\n14.375000\n\n\n7\nnissan\n13.750000\n\n\n3\njeep\n13.500000\n\n\n6\nmercury\n13.250000\n\n\n\n\n\n\n\n\nplt.clf()\nsns.barplot(data = df, x = 'manufacturer', y = 'mean_cty', hue = 'manufacturer')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2. 자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\ndf_mpg = mpg.groupby('category', as_index = False) \\\n            .agg(n = ('category','count')) \\\n            .sort_values('n',ascending = False)\n            \ndf_mpg\n\n\n\n\n\n\n\n\ncategory\nn\n\n\n\n\n6\nsuv\n62\n\n\n1\ncompact\n47\n\n\n2\nmidsize\n41\n\n\n5\nsubcompact\n35\n\n\n4\npickup\n33\n\n\n3\nminivan\n11\n\n\n0\n2seater\n5\n\n\n\n\n\n\n\n\nplt.clf()\nsns.barplot(data = df_mpg, x = 'category', y = 'n', hue = 'category')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "LS 빅데이터 스쿨 Homework 4",
    "section": "",
    "text": "2024-07-29(월)\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import uniform\nfrom scipy.stats import norm\nimport math\nimport numpy as np\n\n\n\n표본 분산 계산 시 왜 n-1로 나누는지 알아보도록 하겠습니다. 균일분포 (3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요.\n\nn-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\nx = uniform.rvs(loc=3, scale=4, size=20*10000).reshape(-1,20)\nx\n\narray([[6.8804115 , 3.81170738, 3.7651943 , ..., 6.43746048, 5.02165541,\n        4.27117068],\n       [3.74500618, 6.74858537, 3.56383383, ..., 5.07993933, 5.80474114,\n        5.9834357 ],\n       [4.89314608, 6.35709756, 3.88333317, ..., 4.66020105, 5.75132888,\n        5.99595639],\n       ...,\n       [5.90537449, 3.49701355, 4.48943218, ..., 5.06576509, 3.46467197,\n        6.18483596],\n       [6.73541232, 6.9930657 , 4.94925848, ..., 3.25980617, 5.54112862,\n        5.32278337],\n       [4.91479523, 4.87649606, 3.87299707, ..., 5.62237697, 6.24859571,\n        6.02170664]])\n\n\n\n# n-1로 나누기\ns_2 = x.var(axis=1, ddof=1)\ns_2\n\narray([1.30644868, 1.7744977 , 0.95885709, ..., 1.59010413, 0.95292142,\n       1.21680893])\n\n\n\n# s_2의 분포\nplt.hist(s_2,color='orange')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n# n으로 나누기\nk_2 = x.var(axis=1,ddof=0)\nk_2\n\narray([1.24112624, 1.68577282, 0.91091423, ..., 1.51059893, 0.90527535,\n       1.15596848])\n\n\n\n# k_2의 분포\nplt.hist(k_2,color='green')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\nplt.hist(s_2,color='red')\nplt.axvline(x = x.var(),color='white',linestyle='--',linewidth=1)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nplt.hist(k_2,color='green')\nplt.axvline(x = x.var(),color='black',linestyle='--',linewidth=1)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\ns_2의 분포는 모분산에 근접합니다. 하지만 k_2의 분포는 모분산보다 낮게 추정됩니다.\n즉 s_2의 경우 표본 분산이 모분산에 대해 편향 없는 추정량이라는 의미입니다. k_2는 표본의 분산을 보정없이 계산하므로, 모분산을 과소 추정하는 경향이 있습니다."
  },
  {
    "objectID": "posts/hw5/index.html",
    "href": "posts/hw5/index.html",
    "title": "LS 빅데이터 스쿨 Homework 5",
    "section": "",
    "text": "2024-07-30(화)\n\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n\n\n챕터 9-2 설문조사 그래프에서 각 성별 95% 신뢰구간 계산후 그리기. norm.ppf() 사용해서 그릴 것. 모분산은 표본 분산을 사용해서 추정하기\n\n# 파일 불러오기\nraw_welfare = pd.read_spss('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/koweps/Koweps_hpwc14_2019_beta2.sav')\n\nwelfare=raw_welfare.copy()\n\n# 변수명 전처리\nwelfare=welfare.rename(\n    columns = {\n        \"h14_g3\": \"sex\",\n        \"h14_g4\": \"birth\",\n        \"h14_g10\": \"marriage_type\",\n        \"h14_g11\": \"religion\",\n        \"p1402_8aq1\": \"income\",\n        \"h14_eco9\": \"code_job\",\n        \"h14_reg7\": \"code_region\"\n    }\n)\n\n# 필요한 칼럼만 추출하기\nwelfare=welfare[[\"sex\", \"birth\", \"marriage_type\",\n                \"religion\", \"income\", \"code_job\", \"code_region\"]]\n\n# 성별 변수 변경\nwelfare[\"sex\"] = np.where(welfare[\"sex\"] == 1,'male', 'female')\nwelfare[\"sex\"].value_counts()\n\nsex\nfemale    7913\nmale      6505\nName: count, dtype: int64\n\n\n\n# 성별에 따른 월급 그래프 그리기\nsex_income=welfare.dropna(subset=\"income\") \\\n                  .groupby(\"sex\", as_index=False) \\\n                  .agg(mean_income = (\"income\", \"mean\"))\n\nsns.barplot(data=sex_income, x=\"sex\", y=\"mean_income\",\n            hue=\"sex\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n# 표준편차, 표본 갯수 구하기\nsex_income = welfare.dropna(subset=[\"income\"]) \\\n                    .groupby(\"sex\", as_index=False) \\\n                    .agg(mean_income=(\"income\", \"mean\"), \n                         std_income=(\"income\", \"std\"), \n                         count=(\"income\", \"size\"))\n\n# 신뢰구간 계산\nconfidence = 0.95\nz = norm.ppf((1 + confidence) / 2)\n\n# 신뢰구간 계산\nsex_income['ci_lower'] = sex_income['mean_income'] - z * (sex_income['std_income'] / np.sqrt(sex_income['count']-1))\nsex_income['ci_upper'] = sex_income['mean_income'] + z * (sex_income['std_income'] / np.sqrt(sex_income['count']-1))\n\n# 시각화\nplt.figure(figsize=(10, 6))\nsns.barplot(data=sex_income, x=\"sex\", y=\"mean_income\", hue=\"sex\", ci=None)\nplt.errorbar(sex_income['sex'], sex_income['mean_income'], \n             yerr=[sex_income['mean_income'] - sex_income['ci_lower'], \n                   sex_income['ci_upper'] - sex_income['mean_income']], \n             fmt='none', color='black', capsize=10)\nplt.show()\nplt.clf()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_15096\\2885580581.py:18: FutureWarning:\n\n\n\nThe `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw6/index.html",
    "href": "posts/hw6/index.html",
    "title": "LS 빅데이터 스쿨 Homework 6",
    "section": "",
    "text": "2024-08-05(월)\n슬통 자동자는 매해 출시되는 신형 자동차의 에너지 소비효율 등급을 1등급으로 유지하고 있다. 22 년 개발된 신형 모델이 한국 자동차 평가원에서 설정한 에너지 소비 효율등급 1등급을 받을 수 있을지 검정하려한다. 평가원에 따르면 1등급의 기준은 평균 복합 에너지 소비효율이 16.0 이상인 경우 부여 한다고 한다. 다음은 신형 자동차 15대의 복합 에너지소비효율 측정한 결과이다.\n15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804\n표본에 의하여 판단해볼때, 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있을지 판단해보시오. (유의수준 1%로 설정)\n\nimport numpy as np\n\n\n\n1. 검정을 위한 가설을 명확하게 서술하시오.\nH0 : 소비효율 &gt;= 16.0\nHa : 소비효율 &lt; 16.0\n\n\n2. 검정통계량 계산하시오.\n\nx = np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,15.382, 16.709, 16.804])\n\nn = len(x)\nx_mean = np.mean(x).round(3)\ns = np.std(x, ddof=1).round(3)\nt = ((x_mean - 16) / (s/np.sqrt(n))).round(3)\n\nprint('표본 갯수 : ', n)\nprint('표본 평균 : ', x_mean)\nprint('표본 분산 : ', s)\nprint('t : ', t)\n\n표본 갯수 :  15\n표본 평균 :  15.532\n표본 분산 :  0.98\nt :  -1.85\n\n\n\n\n3. p‑value을 구하세요.\n\nfrom scipy import stats\np_value = stats.t.cdf(t,n-1)\n\nprint('p-value : ', p_value)\n\np-value :  0.0427658180508888\n\n\n위 p-value는 유의수준 0.01보다 크므로 귀무가설을 기각할 수 있는 조건이 아니다.\n\n\n4. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.\n\n# 95% 신뢰수준에 대한 t 임계값\nt_cri = stats.t.ppf(0.975,n-1)\n\n# 신뢰구간 계산\nresult = (x_mean - t_cri*s/np.sqrt(n), x_mean + t_cri*s/np.sqrt(n))\nresult\n\n(14.989294089266652, 16.07470591073335)"
  }
]