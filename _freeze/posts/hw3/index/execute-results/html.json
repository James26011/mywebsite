{
  "hash": "60405684305065984f4f566a75319256",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: LS 빅데이터 스쿨 Homework 3\nauthor: 이태현\ndate: '2024-07-22'\ncategoty:\n  - bigdata\n---\n\n2024-07-22(화) homework3\n\n::: {#bbbc0fb9 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/portfolio/data/mpg.csv')\n```\n:::\n\n\n# p.204 혼자서 해보기\n\n#### Q1. `mpg` 데이터의 `cty`(도시 연비)와 `hwy`(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 `cty`, y축은 `hwy`로 된 산점도를 만들어 보세요.\n\n::: {#0509480d .cell execution_count=2}\n``` {.python .cell-code}\nplt.clf()\nsns.scatterplot(data = mpg, x = 'cty', y = 'hwy')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=585 height=429}\n:::\n:::\n\n\n#### Q2. 미국의 지역별 인구통계 정보를 담은 `midwest.csv`를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 `poptotal`(전체 인구), y축은 `popasian`(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\n::: {#81703483 .cell execution_count=3}\n``` {.python .cell-code}\nmidwest = pd.read_csv('../../data/midwest.csv')\n\nplt.clf()\nsns.scatterplot(data = midwest, x = 'poptotal', y = 'popasian') \\\n   .set(xlim = [0,500000], ylim = [0,10000])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=635 height=434}\n:::\n:::\n\n\n# p.211 혼자서 해보기\n\n#### Q1. 어떤 회사에서 생산한 `'suv'`차종의 도시 연비가 높ㅇㄴ지 알아보려고 합니다. `'suv'`차종을 대상으로 `cty`(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\n::: {#9a7a288c .cell execution_count=4}\n``` {.python .cell-code}\ndf = mpg.query('category == \"suv\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(mean_cty = ('cty','mean')) \\\n   .sort_values('mean_cty', ascending = False) \\\n   .head()\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>manufacturer</th>\n      <th>mean_cty</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>subaru</td>\n      <td>18.833333</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>toyota</td>\n      <td>14.375000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>nissan</td>\n      <td>13.750000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>jeep</td>\n      <td>13.500000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>mercury</td>\n      <td>13.250000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b0e38a9a .cell execution_count=5}\n``` {.python .cell-code}\nplt.clf()\nsns.barplot(data = df, x = 'manufacturer', y = 'mean_cty', hue = 'manufacturer')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=597 height=429}\n:::\n:::\n\n\n#### Q2. 자동차 중에 어떤 `category`(자동차 종류)가 많은지 알아보려고 합니다. `sns.barplot()`을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\n::: {#a7f1c5fa .cell execution_count=6}\n``` {.python .cell-code}\ndf_mpg = mpg.groupby('category', as_index = False) \\\n            .agg(n = ('category','count')) \\\n            .sort_values('n',ascending = False)\n            \ndf_mpg\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>category</th>\n      <th>n</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>suv</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>compact</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>midsize</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>subcompact</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>pickup</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>minivan</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2seater</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b1795b96 .cell execution_count=7}\n``` {.python .cell-code}\nplt.clf()\nsns.barplot(data = df_mpg, x = 'category', y = 'n', hue = 'category')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=585 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}